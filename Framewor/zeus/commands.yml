# ________ ____  __ __  ______     
#  \___   // __ \|  |  \/  ___/    
#   /    /\  ___/|  |  /\___ \    
#  /_____ \\___  >____//____  >  
#        \/    \/           \/  
#                    Build System
#                          v0.8.4
#

# default language
language: bash

# globals for all commands
globals:
    # NETCAP version
    VERSION: 0.4.7

# command data
commands:
    
    ## Install all
    ##

    install:
        description: install netcap and netlabel to $PATH
        buildNumber: true
        help: Installs the applications to the default system location
        dependencies:
            - net.capture
            - net.label
            - net.collect
            - net.agent
            - net.proxy
            - net.export
            - net.dump
            - net.util
        exec: echo done

    ## Compile Framework Components
    ##

    ## linker flags
    #   -w	disable DWARF generation
    #   -s	disable symbol table

    net.capture:
        description: compile net.capture binary to $GOPATH/bin
        buildNumber: true
        exec: go build -ldflags "-s -w" -o $(go env GOPATH)/bin/net.capture -i github.com/dreadl0ck/netcap/cmd/capture

    net.label:
        description: compile net.label binary to $GOPATH/bin
        buildNumber: true
        exec: go build -ldflags "-s -w" -o $(go env GOPATH)/bin/net.label -i github.com/dreadl0ck/netcap/cmd/label

    net.agent:
        description: compile net.agent binary to $GOPATH/bin
        exec: go build -ldflags "-s -w" -o $(go env GOPATH)/bin/net.agent -i github.com/dreadl0ck/netcap/cmd/agent

    net.collect:
        description: compile net.collect binary to $GOPATH/bin
        exec: go build -ldflags "-s -w" -o $(go env GOPATH)/bin/net.collect -i github.com/dreadl0ck/netcap/cmd/collect

    net.proxy:
        description: compile net.proxy binary to $GOPATH/bin
        exec: go build -ldflags "-s -w" -o $(go env GOPATH)/bin/net.proxy -i github.com/dreadl0ck/netcap/cmd/proxy
    
    net.export:
        description: compile net.export binary to $GOPATH/bin
        exec: go build -ldflags "-s -w" -o $(go env GOPATH)/bin/net.export -i github.com/dreadl0ck/netcap/cmd/export

    net.dump:
        description: compile net.dump binary to $GOPATH/bin
        exec: go build -ldflags "-s -w" -o $(go env GOPATH)/bin/net.dump -i github.com/dreadl0ck/netcap/cmd/dump

    net.util:
        description: compile net.util binary to $GOPATH/bin
        exec: go build -ldflags "-s -w" -o $(go env GOPATH)/bin/net.util -i github.com/dreadl0ck/netcap/cmd/util

    ## Debug Builds
    ##

    install-race:
        description: install a netcap build with race detection enabled
        buildNumber: true
        help: Install the race build to the default system location
        exec: GO111MODULE=on go build -ldflags "-s -w -X github.com/dreadl0ck/netcap.Version=v${VERSION}-race" -race -o $(go env GOPATH)/bin/net.capture -i github.com/dreadl0ck/netcap/cmd/capture

    ## Containers
    ##

    build-all-alpine-docker:
        description: build all framework binaries for linux inside an apline docker container
        help: used to compile for linux on macOS because cross compilation is a pain with CGO
        dependencies:
            - clean
    
    build-all-ubuntu-docker:
        description: build all framework binaries for linux inside an ubuntu docker container
        help: used to compile for linux on macOS because cross compilation is a pain with CGO
        dependencies:
            - clean

    ## Release
    ##

    # run a prod release
    release:
        description: release a new version, bundle and publish on github
        dependencies:
            - gen-version
            - version-bump
            - check-version
            - gen-proto-release
        exec: goreleaser release --rm-dist

    # run a test release
    release-test:
        description: test run to release a new version
        dependencies:
            - gen-version
            #- check-version
            - gen-proto-release
        exec: goreleaser release --rm-dist --skip-publish --skip-validate #--debug

    ## Utils
    ##

    clean:
        description: clean project
        exec: |
            rm -rf bin/*
            rm -f *.ncap *.pcap *.ncap.gz *.log

    # count lines of code
    cloc:
        description: count lines of code for the project
        exec: cloc --exclude-ext pb.go,py,rb,js,cpp,cc,rs,java,swift,c,cs,h cmd metrics label types utils io collector encoder netcap.go reader.go utils.go writer.go

    # generate protocol buffers for development
    gen-proto-dev:
        description: generate protocol buffers
        help: proto compiler must be installed with gogofaster plugin
        exec: protoc --gogofaster_out=types/. --python_out=pynetcap netcap.proto

    # generate protocol buffers for release
    gen-proto-release:
        description: generate protocol buffers
        help: proto compiler must be installed with all required plugins
        exec: |
            mkdir -p types/{python,java,swift,rust,cpp,csharp,js}
            protoc --gogofaster_out=types/. --python_out=types/python --java_out=types/java --swift_out=types/swift --rust_out=types/rust --cpp_out=types/cpp --csharp_out=types/csharp --js_out=types/js netcap.proto

    # the version defined in the globals section will be set via ldflags on each build
    # to ensure the correct version is also set for installation via go get
    # a version.go file is generated on each release with the corresponding version number
    gen-version:
        description: generate the version.go file
        exec: |
            echo -e "// Netcap is a framework for network packet processing at the protocol level. Learn more at https://netcap.io.\npackage netcap\n\n// Netcap version.\nvar Version = \"v${VERSION}\"\nvar Commit = \"$(git rev-parse HEAD | tr -d "\n")\"" > version.go

    # build and push the Alpine docker container
    build-all-linux:
        description: builds the alpine and ubuntu docker containers
    
    # check git version
    check-version:
        description: checks whether the version from the latest git tag matches the one set here
        exec: |
            if [[ $(git describe --abbrev=0) != "v${VERSION}" ]]; then
                echo "[ERROR] latest git tag does not match version $VERSION"
                exit 1
            fi

    # bump the git version tag
    version-bump:
        description: bump framework version and add git version tag
        exec: |
            read -p "[WARNING] This will bump the version to $VERSION, as configured in the zeus/commands.yml. Are you sure? Hit [Enter] to proceed"

            git status
            read -p "[WARNING] The following changes will be added to version control. Hit [Enter] to proceed"
            git add .
            git commit -m "v${VERSION} release"

            git tag -a v${VERSION} -m "v${VERSION} release"
            git push origin v${VERSION}

            echo "[INFO] version bumped to v${VERSION}"
    
    static-analyze:
        description: run the golangci-lint static source code analyzer
        exec: golangci-lint run

    delete-tag:
        description: delete tag locally and remotely
        arguments:
            - tag:String
        exec: |
            git tag -d $tag
            git push --delete origin $tag